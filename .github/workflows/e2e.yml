name: E2E Tests

env:
  HUSKY: 0
  JWT_SECRET: "test_secret"
  JWT_REFRESH_SECRET: "test_refresh"
  JWT_EXPIRATION_TIME: "15min"
  CORS_ORIGIN: ""
  EMAIL_ADAPTER: "mailhog"
  DATABASE_URL: ""
  REDIS_URL: "redis://localhost:6380"
  SMTP_HOST: ""
  SMTP_PORT: "1025"
  SMTP_USER: ""
  SMTP_PASSWORD: ""
  AWS_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: "test"
  AWS_SECRET_ACCESS_KEY: "test"
  AWS_BUCKET_NAME: "test-bucket"
  AWS_ENDPOINT_URL: "http://localhost:4566"
  SES_EMAIL: "noreply@lms.selleo.app"

on:
  workflow_call:
  push:
    branches:
      - main
      - "deploy-staging/**"
  workflow_dispatch:

jobs:
  playwright:
    name: Playwright Tests
    runs-on: ubuntu-latest
    environment:
      name: e2e

    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 54321:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Install and Start LocalStack
        uses: LocalStack/setup-localstack@v0.2.3
        with:
          image-tag: 'latest'
          install-awslocal: 'true'
          configuration: |
            SERVICES=s3
            DEBUG=0
            DATA_DIR=/tmp/localstack/data
            PERSISTENCE=0

      - name: Install Caddy
        run: |
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
          sudo apt update
          sudo apt install caddy -y

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.2.1

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.15.0
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright
          restore-keys: |
            ${{ runner.os }}-playwright

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        working-directory: ./apps/web
        env:
          PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright

      - name: Setup local S3 bucket
        run: |
          echo "Checking LocalStack setup..."
          max_attempts=5
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -sf http://localhost:4566/_localstack/health >/dev/null 2>&1; then
              echo "LocalStack is ready"
              break
            fi
            attempt=$((attempt + 1))
            wait_time=$((2 ** (attempt > 4 ? 4 : attempt)))
            echo "Waiting for LocalStack... (attempt $attempt/$max_attempts, waiting ${wait_time}s)"
            sleep $wait_time
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "LocalStack failed to start after $max_attempts attempts"
            curl -v http://localhost:4566/_localstack/health || true
            exit 1
          fi

          echo "Creating S3 bucket..."
          if ! awslocal s3 mb s3://test-bucket; then
            echo "Failed to create S3 bucket"
            exit 1
          fi

          echo "Configuring bucket CORS..."
          awslocal s3api put-bucket-cors --bucket test-bucket --cors-configuration '{
            "CORSRules": [{
              "AllowedOrigins": ["*"],
              "AllowedMethods": ["GET", "PUT", "POST", "DELETE"],
              "AllowedHeaders": ["*"]
            }]
          }' || echo "Warning: Failed to set CORS configuration"

          echo "S3 setup completed successfully!"

      - name: Run tests
        run: pnpm playwright test
        working-directory: ./apps/web
        env:
          PLAYWRIGHT_BROWSERS_PATH: /home/runner/.cache/ms-playwright
          DATABASE_URL: postgresql://test_user:test_password@localhost:54321/test_db
          REDIS_URL: "redis://localhost:6380"
          NODE_ENV: test
          API_URL: http://localhost:3000
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: |
            playwright-report
            test-results
            **/*.zip
