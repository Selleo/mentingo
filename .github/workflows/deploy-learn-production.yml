name: Deploy Learn (Production)

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy_api:
    runs-on: ubuntu-latest
    environment:
      name: learn-production
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set tag
        run: echo "IMAGE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_URL: ${{ steps.login-ecr.outputs.registry }}/learn/production/api
        run: |
          docker build -f ./api.Dockerfile --build-arg VERSION=$IMAGE_TAG -t $ECR_URL:$IMAGE_TAG .
          docker push $ECR_URL:$IMAGE_TAG
          echo "IMAGE=$ECR_URL:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render secrets from parameter store
        id: render-secrets
        uses: Selleo/amazon-ecs-render-task-definition-secrets@v1.0.0
        with:
          region: eu-central-1
          task-definition: .github/tasks/learn/task-api.json
          envs: |
            NODE_ENV
            DATABASE_URL
            AWS_REGION
            AWS_BUCKET_NAME
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            JWT_SECRET
            JWT_REFRESH_SECRET
            JWT_EXPIRATION_TIME
            SMTP_HOST     
            SMTP_PORT
            SMTP_USER
            SMTP_PASSWORD
            EMAIL_ADAPTER
            SENTRY_DSN
            SENTRY_ENVIRONMENT
            SES_EMAIL
            STRIPE_PUBLISHABLE_KEY
            STRIPE_SECRET_KEY
            STRIPE_WEBHOOK_SECRET
            REDIS_URL
            CORS_ORIGIN
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            GOOGLE_OAUTH_ENABLED
            MICROSOFT_CLIENT_ID
            MICROSOFT_CLIENT_SECRET
            MICROSOFT_OAUTH_ENABLED
            BUNNY_STREAM_API_KEY
            BUNNY_STREAM_SIGNING_KEY
            BUNNY_STREAM_LIBRARY_ID
            BUNNY_STREAM_CDN_URL
            OPENAI_API_KEY
            SLACK_CLIENT_ID
            SLACK_CLIENT_SECRET
            SLACK_OAUTH_ENABLED
            MASTER_KEY

          paths: |
            /learn/production/api/terraform/
            /learn/production/api/editable/

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-secrets.outputs.task-definition }}
          container-name: learn-api
          image: ${{ env.IMAGE }}

      - name: Render secrets from parameter store for migrate
        id: render-secrets-migrate
        uses: Selleo/amazon-ecs-render-task-definition-secrets@v1.0.0
        with:
          region: eu-central-1
          task-definition: .github/tasks/learn/task-migrate.json
          envs: |
            NODE_ENV
            DATABASE_URL
            AWS_REGION
            AWS_BUCKET_NAME
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            JWT_SECRET
            JWT_REFRESH_SECRET
            JWT_EXPIRATION_TIME
            SMTP_HOST     
            SMTP_PORT
            SMTP_USER
            SMTP_PASSWORD
            EMAIL_ADAPTER
            SENTRY_DSN
            SENTRY_ENVIRONMENT
            SES_EMAIL
            STRIPE_PUBLISHABLE_KEY
            STRIPE_SECRET_KEY
            STRIPE_WEBHOOK_SECRET
            REDIS_URL
            CORS_ORIGIN
            GOOGLE_CLIENT_ID
            GOOGLE_CLIENT_SECRET
            GOOGLE_OAUTH_ENABLED
            MICROSOFT_CLIENT_ID
            MICROSOFT_CLIENT_SECRET
            MICROSOFT_OAUTH_ENABLED
            BUNNY_STREAM_API_KEY
            BUNNY_STREAM_SIGNING_KEY
            BUNNY_STREAM_LIBRARY_ID
            BUNNY_STREAM_CDN_URL
            OPENAI_API_KEY
            SLACK_CLIENT_ID
            SLACK_CLIENT_SECRET
            SLACK_OAUTH_ENABLED
            MASTER_KEY

          paths: |
            /learn/production/api/terraform/
            /learn/production/api/editable/

      - name: Fill in the new image ID in the Amazon ECS task definition for migrate
        id: task-def-migrate
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-secrets-migrate.outputs.task-definition }}
          container-name: learn-api-migrate
          image: ${{ env.IMAGE }}

      - name: ECS Run migrations
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.3.0
        with:
          task-definition: ${{ steps.task-def-migrate.outputs.task-definition }}
          cluster: ict-shared-dea0cd56
          run-task: true
          run-task-launch-type: EC2
          wait-for-task-stopped: true

      - name: ECS Deployment
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2.3.0
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: learn-api
          cluster: ict-shared-dea0cd56
          wait-for-service-stability: true

  deploy_ui:
    runs-on: ubuntu-latest
    environment:
      name: learn-production
    defaults:
      run:
        working-directory: ./
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set tag
        run: echo "IMAGE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - name: Save version in apps/web
        run: |
          # Try to get latest local tag
          TAG_VERSION=$(git describe --tags --abbrev=0 --match "v*" 2>/dev/null || true)

          # If no tag found, fetch from external repo
          if [ -z "$TAG_VERSION" ]; then
            echo "⚠️ No local tags found. Fetching from Selleo/mentingo..."
            TAG_VERSION=$(git ls-remote --tags https://github.com/Selleo/mentingo \
              | awk -F/ '{print $3}' \
              | sed 's/\^{}//' \
              | grep '^v' \
              | sort -V \
              | tail -n1)
          fi

          echo "{ \"version\": \"$TAG_VERSION\" }" > apps/web/version.json
          echo "✅ Wrote version $TAG_VERSION to apps/web/version.json"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_URL: ${{ steps.login-ecr.outputs.registry }}/learn/production/ui
          VITE_STRIPE_PUBLISHABLE_KEY: ${{secrets.STRIPE_PUBLISHABLE_KEY}}
          VITE_SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
          VITE_SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          VITE_SENTRY_PROJECT: learn-hub
          VITE_SENTRY_DSN: ${{secrets.SENTRY_DSN}}
          VITE_GOOGLE_OAUTH_ENABLED: ${{secrets.VITE_GOOGLE_OAUTH_ENABLED}}
          VITE_MICROSOFT_OAUTH_ENABLED: ${{secrets.VITE_MICROSOFT_OAUTH_ENABLED}}
          VITE_SLACK_OAUTH_ENABLED: ${{secrets.VITE_SLACK_OAUTH_ENABLED}}
        run: |
          docker build -f ./web.Dockerfile \
            --build-arg VERSION=$IMAGE_TAG \
            --build-arg VITE_STRIPE_PUBLISHABLE_KEY=$VITE_STRIPE_PUBLISHABLE_KEY \
            --build-arg VITE_SENTRY_AUTH_TOKEN=$VITE_SENTRY_AUTH_TOKEN \
            --build-arg VITE_SENTRY_ORG=$VITE_SENTRY_ORG \
            --build-arg VITE_SENTRY_PROJECT=$VITE_SENTRY_PROJECT \
            --build-arg VITE_SENTRY_DSN=$VITE_SENTRY_DSN \
            --build-arg VITE_GOOGLE_OAUTH_ENABLED=$VITE_GOOGLE_OAUTH_ENABLED \
            --build-arg VITE_MICROSOFT_OAUTH_ENABLED=$VITE_MICROSOFT_OAUTH_ENABLED \
            --build-arg VITE_SLACK_OAUTH_ENABLED=$VITE_SLACK_OAUTH_ENABLED \
            -t $ECR_URL:$IMAGE_TAG .
          docker push $ECR_URL:$IMAGE_TAG
          echo "image=$ECR_URL:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/tasks/learn/task-ui.json
          container-name: learn-ui
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: learn-ui
          cluster: ict-shared-dea0cd56
          wait-for-service-stability: true