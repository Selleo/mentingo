name: Backend Pull Request Check

env:
  HUSKY: 0
  # environment variables for testing
  JWT_SECRET: "test_secret"
  JWT_REFRESH_SECRET: "test_refresh"
  JWT_EXPIRATION_TIME: "15min"
  CORS_ORIGIN: ""
  EMAIL_ADAPTER: "mailhog"
  DATABASE_URL: ""
  REDIS_URL: ""
  SMTP_HOST: ""
  SMTP_PORT: "1025"
  SMTP_USER: ""
  SMTP_PASSWORD: ""
  AWS_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: "test"
  AWS_SECRET_ACCESS_KEY: "test"
  AWS_BUCKET_NAME: "test-bucket"
  AWS_ENDPOINT_URL: "http://localhost:4566"
  SES_EMAIL: "noreply@lms.selleo.app"
  STRIPE_SECRET_KEY: "test_secret"
  STRIPE_PUBLISHABLE_KEY: "test_secret"
  STRIPE_WEBHOOK_SECRET: "test_secret"
  GOOGLE_OAUTH_ENABLED: "false"
  MICROSOFT_OAUTH_ENABLED: "false"
  SLACK_OAUTH_ENABLED: "false"
  MASTER_KEY: "+iFu6dFP3uc8WFAB22Ebhh9GJjnmrv/bLxOv3L/n3zw="

on:
  pull_request:
    branches:
      - "*"
    paths:
      - apps/api/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.15.0
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Build shared packages
        run: pnpm --filter="@repo/shared" run build

      - name: Run ESLint
        run: pnpm --filter=api lint-tsc

  build:
    name: Build app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/api/
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20.15.0
          cache: pnpm

      - run: pnpm install
      - name: Build shared packages
        run: pnpm --filter="@repo/shared" run build
      - name: Build the app
        run: pnpm run build
      - name: Verify build output
        run: pnpm start:prod

  test:
    name: Jest tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4

      - name: Start containers
        run: docker compose -f "docker-compose.yml" up -d --build

      - uses: actions/setup-node@v4
        with:
          node-version: 20.9.0
          cache: pnpm

      - name: Install and Start LocalStack
        uses: LocalStack/setup-localstack@v0.2.3
        with:
          image-tag: 'latest'
          install-awslocal: 'true'
          configuration: |
            SERVICES=s3
            DEBUG=0
            DATA_DIR=/tmp/localstack/data
            PERSISTENCE=0

      - name: Setup local S3 bucket
        run: |
          echo "Checking LocalStack setup..."
          max_attempts=5
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -sf http://localhost:4566/_localstack/health >/dev/null 2>&1; then
              echo "LocalStack is ready"
              break
            fi
            attempt=$((attempt + 1))
            wait_time=$((2 ** (attempt > 4 ? 4 : attempt)))
            echo "Waiting for LocalStack... (attempt $attempt/$max_attempts, waiting ${wait_time}s)"
            sleep $wait_time
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "LocalStack failed to start after $max_attempts attempts"
            curl -v http://localhost:4566/_localstack/health || true
            exit 1
          fi
          
          echo "Creating S3 bucket..."
          if ! awslocal s3 mb s3://test-bucket; then
            echo "Failed to create S3 bucket"
            exit 1
          fi
          
          echo "Configuring bucket CORS..."
          awslocal s3api put-bucket-cors --bucket test-bucket --cors-configuration '{
            "CORSRules": [{
              "AllowedOrigins": ["*"],
              "AllowedMethods": ["GET", "PUT", "POST", "DELETE"],
              "AllowedHeaders": ["*"]
            }]
          }' || echo "Warning: Failed to set CORS configuration"
          
          echo "S3 setup completed successfully!"

      - name: Install dependencies
        run: pnpm install

      - name: Build shared packages
        run: pnpm --filter="@repo/shared" run build

      - name: Run unit tests
        run: pnpm --filter=api test:ci

      - name: Run e2e tests
        run: pnpm --filter=api test:e2e
